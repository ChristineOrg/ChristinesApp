@page "/blog/{route}"
@rendermode InteractiveAuto
@inject PersistentComponentState ApplicationState
@implements IDisposable

@using SharedClasses.Interfaces
@using SharedClasses.Models.BlogModels
@inject IBlogPageDataService DataService

@if (blog == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="Admin">
        <div class="mb-3, text-center">
            <a class="btn btn-outline-dark" href="/ManageBlog/@blog.Route">Edit Blog</a>
        </div>        
    </AuthorizeView>    
    <h3>@blog.Title</h3>
    <p>@blog.Description</p>

    @foreach(Post post in blog.Posts)
    {
        <p>@post.Title</p>
    }
}
@code {
    [Parameter]
    public string? route{ get; set; }
    private PersistingComponentStateSubscription persistingSubscription;
    private Blog? blog;

    protected async override Task OnParametersSetAsync()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson <Blog?> (
            "Blog", out Blog? restored))
        {
            if (route is not null)
            {
                blog = await DataService.GetBlogFromRouteAsync(route);
            }
        }
        else
        {
            blog = restored!;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("Blog", blog);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
