@page "/auth"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration

<h1>ClaimsPrincipal Data</h1>
<NavLink class="btn btn-primary" href="serverauth">View Server Auth</NavLink>
<p> Use this code to check authorization. Delete or comment out when no longer needed.</p><p> Use this code to check authorization. Delete or comment out when no longer needed.</p>

<h2>Authorization status using code.</h2>
<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p>Authentication Status: @authMessage</p>
<p>Role Status: @roleMessage</p>
<p>@surname</p>
@if (claims.Count() > 0)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}
<h2>Authorization status using AuthorizeView components.</h2>
<AuthorizeView>
    <Authorized>
        You are logged in.
    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>


<AuthorizeView Roles="Admin">
    <Authorized>
        You are admin.
    </Authorized>
    <NotAuthorized>
        You are not an admin.
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? authMessage;
    private string? roleMessage;
    private string? surname;


    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            if (user.IsInRole("Admin"))
            {
                roleMessage = $"{user.Identity.Name} is an Admin.";
            }
            else
            {
                roleMessage = $"{user.Identity.Name} is NOT an Admin.";
            }
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }
}