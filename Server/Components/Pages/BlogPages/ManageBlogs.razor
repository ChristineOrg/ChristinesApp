@page "/ManageBlogs"

@rendermode InteractiveServer
@using Server.Data
@using SharedClasses.Models.BlogModels
@inject ManageBlogsPageDataService ds

@attribute [Authorize(Roles ="Admin")]

<h3>Manage Blogs</h3>
<p>A list of blogs on this site. You can add, edit, update and delete blogs here.</p>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />


@if (Blogs == null)
{
    <p>...loading</p>
}
else
{
    <button class="btn btn-primary" @onclick="OpenAddModalAsync">
        <span class="oi oi-plus" aria-hidden="true"></span>
        Add blog
    </button>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var blog in Blogs)
            {
                <tr>
                    <td><a class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover" href="ManageBlog/@blog.Route">@blog.Title</a></td>
                    <td>
                        <button class="btn btn-light" @onclick="() => OpenEditModalAsync(blog)">
                            <Icon Name="IconName.Pencil"/>
                        </button>
                        <button class="btn btn-light" @onclick="() => OnDeleteAsync(blog)">
                            <Icon Name="IconName.X"/>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Modal @ref="editModal" UseStaticBackdrop="true" CloseOnEscape="false"/>
}

@code 
{
    private Modal editModal = default!;

    public static List<Blog>? Blogs { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Blogs = await ds.GetBlogsAsync();
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private async void OpenAddModalAsync()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback",new Action<Blog>(AddCompleteAsync));
        await editModal.ShowAsync<EditBlogPage>(title: "Add Blog",parameters: parameters);
    }

    public async void AddCompleteAsync(Blog? blog)
    {
        editModal?.HideAsync();
        if(blog != null)
        {
            var newBlog = await ds.AddAsync(blog);
            Blogs?.Add(newBlog);
            StateHasChanged();
        }
    }

    private async void OpenEditModalAsync(Blog blog)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Blog", blog);
        parameters.Add("OnclickCallback", new Action<Blog>(EditCompleteAsync));
        await editModal.ShowAsync<EditBlogPage>(title: "Edit Blog", parameters: parameters);
    }

    public async void EditCompleteAsync(Blog? blog)
    {

        editModal?.HideAsync();
        if (blog != null)
        {
            await ds.UpdateAsync(blog);
            StateHasChanged();
        }

    }

    private async void OnDeleteAsync(Blog blog)
    {
        await ds.DeleteAsync(blog.Id);
        Blogs?.Remove(blog);
    }
}
