@implements IDisposable

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject NavigationDAL DAL
@using SharedClasses.Models

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@Configuration["WebSiteName"]</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <Icon Name="IconName.HouseFill"/> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <Icon Name="IconName.Lock"/> Auth Required
            </NavLink>
        </div>

        @foreach (NavMenuItem navMenuItem in navMenuItems)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@navMenuItem.Url">
                    <Icon Name="IconName.Book" /> @navMenuItem.Title
                </NavLink>
            </div>
        }

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Admin">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="UserManagement">
                    <span class="bi bi-people" aria-hidden="true"></span> Manage Users
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="ManageBlogs">
                    <span class="bi bi-people" aria-hidden="true"></span> Manage Blogs
                </NavLink>
            </div>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private List<NavMenuItem> navMenuItems = default!;

    protected async override Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        navMenuItems = await DAL.GetNavMenuItemsAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

